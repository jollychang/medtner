#!/usr/bin/python

import sys
import emulator
import sdkManage
from emulatorManage import emulatorManage
from emulator import Emulator
from optparse import OptionParser

parser = OptionParser(usage='%prog [action] [action options]\n'+
                             'action:\n'+
                             '  avdlist\tShow emulators'' information.\n'+
                             '  avdstart\tStart emulator matching options.\n'+
                             '\t\tIf no one match, create and launch\n'+
                             '  avdstop\tStop the launched emulator.\n'+
                             '  avddel\tDelete emulators matching options.\n'+
                             '  install\tInstall APK to the lauched emulator.\n'+
                             '  uninstall\tUninstall package from the launched emulator.\n'
                             '  update\tUpdate the SDK. Wait a moment.\n'+
                             '  service\tInstall the selenium android server and start service.',version='%prog 1.0')

parser.add_option('-a', 
                  action='store_true', dest='allavd',default=False, 
                  help='show all emulators, can be omitted')
parser.add_option('-n',dest='avdname',
                  help='action on the emulator named <name>', metavar='<name>')
parser.add_option('-s',dest='skinname',
                  help='action on the emulators with <skin>, format like 480x800', metavar='<skin>')
parser.add_option('-l',dest='level',
                  help='action on the emulators with <level>, such as 10', metavar='<level>')
parser.add_option('-o',dest='overlevel',
                  help='action on the targets higher than <level>', metavar='<level>')

(options, args) = parser.parse_args()

emuManage = emulatorManage()
emuManage.searchEmulators()

if options.avdname != None:
    emuManage.emulatorList = emuManage.getEmulatorByName(options.avdname)
    if emuManage.emulatorList == []:
        print 'There is no emulator named "'+ options.avdname+'"'
if options.skinname != None:
    skin = options.skinname.split('x')
    if len(skin) != 2:
        print 'InputError:Skin should be "widthxheight"'
        sys.exit()
    width = skin[0]
    height = skin[1]
    emuManage.emulatorList = emuManage.getEmulatorsBySkin(width,height)
    if emuManage.emulatorList == []:
        print 'There is no emulator with skin "'+options.skinname+'"'
if options.level != None:
    emuManage.emulatorList = emuManage.getEmulatorsByLevel(options.level)
    if emuManage.emulatorList == []:
        print 'There is no emulator with "'+ options.level+'"'
if options.overlevel != None:
    emuManage.emulatorList = emuManage.getEmulatorsOverLevel(options.overlevel)
    if emuManage.emulatorList == []:
        print 'There is no emulator over "level '+options.overlevel+'"' 
        options.level = options.overlevel

if sys.argv[1] == 'avdlist':
    if emuManage.emulatorList == []:
        sys.exit()
    print '\nAndroid Virtual Devices:'
    for emu in emuManage.emulatorList:
        emu.printEmulator()
elif sys.argv[1] == 'avdstart':
    if emuManage.emulatorList != []:
        print '\nStart Android Virtual Device:'
        emuManage.startEmulatorList()    
    else:
        print '\nCreate emulator and start:'
        if options.level == None:
            options.level = str(sdkManage.getLastSDKLevel()['level'])
        Target = sdkManage.getTarget(options.level)
        new_emu = Emulator(options.avdname,None,'Andoird '+Target+' (API level '+options.level+')','armeabi',options.skinname,None)
        new_emu.createEmulator()
        new_emu.startEmulator()
elif sys.argv[1] == 'avdstop':
     if emuManage.emulatorList != []:
        emuManage.stopEmulatorList()    
elif sys.argv[1] == 'avddel':
    if emuManage.emulatorList == []:
        sys.exit()
    print '\nDelete Android Virtual Devices:'
    for emu in emuManage.emulatorList:
        emu.deleteEmulator()
elif sys.argv[1] == 'install':
    apkPath = sys.argv[2]
    if apkPath != None:
        emulator.install(apkPath)
elif sys.argv[1] == 'uninstall':
    packName = sys.argv[2]
    if packName != None:
        emulator.uninstall(packName)
elif sys.argv[1] == 'update':
    sdkManage.updateSDK()
elif sys.argv[1] == 'service':
    emulator.startService('org.openqa.selenium.android.app/.MainActivity')
else:
    print 'command error'
    sys.exit()



